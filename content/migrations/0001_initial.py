# Generated by Django 4.2.13 on 2025-06-17 19:22

import content.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=200)),
                ("description", models.TextField(blank=True, max_length=2000)),
                (
                    "parent_category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="subcategories",
                        to="content.category",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scorm_id", models.CharField(blank=True, max_length=255, null=True)),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, max_length=5000)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("bundle", "Course Bundle"),
                            ("in_person", "In Person Course"),
                            ("online", "Online Course"),
                        ],
                        default="bundle",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("Active", "Active"), ("Inactive", "Inactive")],
                        default="Inactive",
                        max_length=20,
                    ),
                ),
                ("upload_instructions", models.TextField(blank=True, max_length=5000)),
                ("locked", models.BooleanField(default=False)),
                (
                    "estimated_completion_time",
                    models.DurationField(
                        blank=True,
                        help_text="Estimated time to complete the course (e.g., 3 hours)",
                        null=True,
                    ),
                ),
                ("terms_and_conditions", models.BooleanField(default=False)),
                (
                    "must_complete",
                    models.CharField(
                        choices=[
                            ("any_order", "All lessons, in any order"),
                            ("by_chapter", "All lessons, in order by chapter"),
                        ],
                        default="any_order",
                        max_length=20,
                    ),
                ),
                ("referencesEnabled", models.BooleanField(default=False)),
                ("uploadsEnabled", models.BooleanField(default=False)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="content.category",
                    ),
                ),
            ],
            bases=(models.Model, content.models.EventDateMixin),
        ),
        migrations.CreateModel(
            name="EssayPrompt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "prompt_text",
                    models.TextField(
                        help_text="The question or prompt for the essay response.",
                        verbose_name="Prompt Text",
                    ),
                ),
                (
                    "rubric",
                    models.TextField(
                        blank=True,
                        help_text="Optional grading guidance for this specific prompt.",
                        null=True,
                        verbose_name="Rubric",
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0)),
            ],
            options={
                "verbose_name": "Essay Prompt",
                "verbose_name_plural": "Essay Prompts",
            },
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file", models.FileField(upload_to="user_files/")),
                ("title", models.CharField(default="Untitled", max_length=255)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "file_type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("document", "Document"),
                            ("video", "Video"),
                            ("audio", "Audio"),
                            ("scorm", "SCORM"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=50,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, max_length=2000)),
                ("order", models.PositiveIntegerField()),
                ("content_type", models.CharField(default="file", max_length=200)),
                ("scorm_id", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "create_quiz_from",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("create_quiz_from1", "Quiz Template"),
                            ("create_quiz_from2", "Quiz"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "quiz_template_id",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "selected_quiz_template_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("quiz_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "selected_quiz_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.file",
                    ),
                ),
            ],
            options={"ordering": ["order"],},
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tags", models.CharField(blank=True, max_length=128)),
                (
                    "urlField",
                    models.TextField(
                        blank=True, null=True, verbose_name="IFrame for Exercises."
                    ),
                ),
                (
                    "content",
                    models.CharField(
                        help_text="Enter the question text that you want displayed",
                        max_length=1000,
                        verbose_name="Question",
                    ),
                ),
                (
                    "explanation",
                    models.TextField(
                        blank=True,
                        help_text="Explanation to be shown after the question has been answered.",
                        max_length=2000,
                        verbose_name="Explanation",
                    ),
                ),
                (
                    "randomize_answer_order",
                    models.BooleanField(
                        default=False,
                        help_text="Display the answers in a random order when the question is shown.",
                        verbose_name="Randomize Answer Order",
                    ),
                ),
                ("allows_multiple", models.BooleanField(default=False)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.category",
                        verbose_name="Category",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QuestionOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.question",
                    ),
                ),
            ],
            options={"ordering": ["order"],},
        ),
        migrations.CreateModel(
            name="Quiz",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Title")),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="a description of the quiz",
                        verbose_name="Description",
                    ),
                ),
                (
                    "duration",
                    models.SmallIntegerField(
                        blank=True,
                        default=30,
                        help_text="Minutes to take the exam.",
                        verbose_name="Duration",
                    ),
                ),
                (
                    "url",
                    models.SlugField(
                        help_text="a user friendly url",
                        max_length=60,
                        unique=True,
                        verbose_name="user friendly url",
                    ),
                ),
                (
                    "random_order",
                    models.BooleanField(
                        default=True,
                        help_text="Display the questions in a random order or as they are set?",
                        verbose_name="Random Order",
                    ),
                ),
                (
                    "ai_grade_essay",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Use AI to grade essays?",
                        null=True,
                        verbose_name="AI Essay Grading",
                    ),
                ),
                (
                    "max_questions",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of questions to be answered on each attempt.",
                        null=True,
                        verbose_name="Max Questions",
                    ),
                ),
                (
                    "answers_at_end",
                    models.BooleanField(
                        default=False,
                        help_text="Correct answer is NOT shown after question. Answers displayed at the end.",
                        verbose_name="Answers at end",
                    ),
                ),
                (
                    "exam_paper",
                    models.BooleanField(
                        default=False,
                        help_text="If yes, the result of each attempt by a user will be stored. Necessary for marking.",
                        verbose_name="Exam Paper",
                    ),
                ),
                (
                    "quiz_material",
                    models.TextField(
                        blank=True,
                        help_text="Specify any external resources the test-taker is allowed to use during the quiz. Please separate each quiz material by a comma.",
                        verbose_name="Quiz Materials",
                    ),
                ),
                (
                    "ai_grade_rubric",
                    models.TextField(
                        blank=True,
                        help_text="Rubric to be used by the grading AI",
                        null=True,
                        verbose_name="AI Grading Rubric",
                    ),
                ),
                (
                    "single_attempt",
                    models.BooleanField(
                        default=False,
                        help_text="If yes, only one attempt by a user will be permitted. Non users cannot sit this exam.",
                        verbose_name="Single Attempt",
                    ),
                ),
                (
                    "pass_mark",
                    models.SmallIntegerField(
                        blank=True,
                        default=70,
                        help_text="Percentage required to pass exam.",
                        verbose_name="Pass Mark(%)",
                    ),
                ),
                (
                    "success_text",
                    models.TextField(
                        blank=True,
                        default="Congratulations! You've successfully passed the quiz.",
                        help_text="Displayed if user passes.",
                        verbose_name="Success Text",
                    ),
                ),
                (
                    "singular_quiz_rules",
                    models.TextField(
                        blank=True,
                        help_text="a set of rules for a specific quiz.",
                        verbose_name="singular_quiz_rules",
                    ),
                ),
                (
                    "fail_text",
                    models.TextField(
                        blank=True,
                        default="You didn’t pass this time. Review the material and try again.",
                        help_text="Displayed if user fails.",
                        verbose_name="Fail Text",
                    ),
                ),
                (
                    "draft",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="If yes, the quiz is not displayed in the quiz list and can only be taken by users who can edit quizzes.",
                        verbose_name="Draft",
                    ),
                ),
                (
                    "total_attempts",
                    models.SmallIntegerField(
                        default=1,
                        help_text="Maximum number of attempts the user can attempt.",
                        verbose_name="Total Number of Attempts",
                    ),
                ),
                (
                    "attempts_taken",
                    models.SmallIntegerField(
                        default=1,
                        help_text="Number of attempts the current user has taken.",
                        verbose_name="Number of attempts taken",
                    ),
                ),
                (
                    "total_warnings",
                    models.IntegerField(
                        default=25,
                        help_text="Total number of warnings allowed for this quiz. Unlimited if 0.",
                        verbose_name="Number of warnings before exam shut down:",
                    ),
                ),
                (
                    "allow_restart",
                    models.BooleanField(
                        default=True,
                        verbose_name="Do you want the user to restart the exam once started?",
                    ),
                ),
                ("archived", models.BooleanField(blank=True, default=False)),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="quiz_author",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Exam author",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.category",
                        verbose_name="Category",
                    ),
                ),
                (
                    "questions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="quizzes",
                        through="content.QuestionOrder",
                        to="content.question",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QuizTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("total_questions", models.PositiveIntegerField(default=0)),
                ("last_edited", models.DateTimeField(auto_now=True)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional notes or guidance for using this template.",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Allow other educators to view or copy this template.",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TemplateCategorySelection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("num_questions", models.PositiveIntegerField()),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="template_category",
                        to="content.category",
                    ),
                ),
                (
                    "sub_category1",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="template_sub_category1",
                        to="content.category",
                    ),
                ),
                (
                    "sub_category2",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="template_sub_category2",
                        to="content.category",
                    ),
                ),
                (
                    "sub_category3",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="template_sub_category3",
                        to="content.category",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="category_selections",
                        to="content.quiztemplate",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UploadedFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("file", models.FileField(blank=True, null=True, upload_to="uploads/")),
                ("url", models.URLField(blank=True, null=True)),
                (
                    "scorm_entry_point",
                    models.CharField(blank=True, max_length=512, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EssayQuestion",
            fields=[
                (
                    "question_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="content.question",
                    ),
                ),
                (
                    "instructions",
                    models.TextField(
                        blank=True,
                        help_text="General instructions for answering this essay question.",
                        null=True,
                        verbose_name="Instructions",
                    ),
                ),
                (
                    "rubric",
                    models.TextField(
                        blank=True,
                        help_text="Detailed grading rubric for instructors or AI.",
                        null=True,
                        verbose_name="Rubric",
                    ),
                ),
                (
                    "answer_type",
                    models.CharField(
                        blank=True,
                        help_text="Optional classification or guidance for the expected answer.",
                        max_length=150,
                        null=True,
                        verbose_name="Answer Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Essay Question (Manual/AI Graded)",
                "verbose_name_plural": "Essay Questions (Manual/AI Graded)",
            },
            bases=("content.question",),
        ),
        migrations.CreateModel(
            name="FITBQuestion",
            fields=[
                (
                    "question_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="content.question",
                    ),
                ),
                (
                    "case_sensitive",
                    models.BooleanField(
                        default=False,
                        help_text="If enabled, answers must match exactly including case.",
                        verbose_name="Case Sensitive",
                    ),
                ),
                (
                    "strip_whitespace",
                    models.BooleanField(
                        default=True,
                        help_text="Trim leading/trailing whitespace before checking answer.",
                        verbose_name="Strip Whitespace",
                    ),
                ),
            ],
            bases=("content.question",),
        ),
        migrations.CreateModel(
            name="MCQuestion",
            fields=[
                (
                    "question_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="content.question",
                    ),
                ),
                (
                    "answer_order",
                    models.CharField(
                        blank=True,
                        default="none",
                        help_text="The order in which multichoice answer options are displayed to the user",
                        max_length=30,
                        null=True,
                        verbose_name="Answer Order",
                    ),
                ),
            ],
            options={
                "verbose_name": "Multiple Choice Question",
                "verbose_name_plural": "Multiple Choice Questions",
            },
            bases=("content.question",),
        ),
        migrations.CreateModel(
            name="TFQuestion",
            fields=[
                (
                    "question_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="content.question",
                    ),
                ),
                (
                    "correct",
                    models.BooleanField(
                        help_text="Select 'True' if the correct answer is True, else 'False'.",
                        verbose_name="Correct Answer",
                    ),
                ),
            ],
            options={
                "verbose_name": "True/False Question",
                "verbose_name_plural": "True/False Questions",
            },
            bases=("content.question",),
        ),
        migrations.CreateModel(
            name="Upload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "approval_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            (None, "None"),
                            ("instructor", "Instructor"),
                            ("admin", "Admin"),
                            ("other", "Other"),
                        ],
                        default=None,
                        max_length=30,
                        null=True,
                    ),
                ),
                ("title", models.CharField(default="title", max_length=255)),
                ("description", models.TextField(blank=True, max_length=2000)),
                (
                    "approvers",
                    models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="uploads",
                        to="content.course",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TemplateQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "filter_source",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="content.templatecategoryselection",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.question",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="content.quiztemplate",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Resources",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("reference", "Reference")], max_length=20
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=200)),
                ("url", models.URLField(blank=True, max_length=500)),
                ("file_type", models.CharField(blank=True, max_length=200, null=True)),
                ("file_title", models.CharField(blank=True, max_length=200, null=True)),
                ("description", models.TextField(blank=True, max_length=2000)),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resources",
                        to="content.course",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QuizReference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True, null=True, upload_to="quiz_references/"
                    ),
                ),
                (
                    "source_type",
                    models.CharField(
                        choices=[("upload", "Upload"), ("library", "Library")],
                        default="upload",
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=255)),
                ("url_from_library", models.URLField(blank=True, max_length=500)),
                ("type_from_library", models.CharField(blank=True, max_length=255)),
                (
                    "quiz",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="references",
                        to="content.quiz",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QuizConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("quiz_type", models.CharField(blank=True, max_length=50, null=True)),
                ("passing_score", models.PositiveIntegerField(blank=True, null=True)),
                ("require_passing", models.BooleanField(default=False)),
                ("quiz_duration", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "quiz_attempts",
                    models.CharField(
                        blank=True, default="Unlimited", max_length=20, null=True
                    ),
                ),
                (
                    "maximum_warnings",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("randomize_order", models.BooleanField(default=False)),
                ("reveal_answers", models.BooleanField(default=False)),
                (
                    "lesson",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quiz_config",
                        to="content.lesson",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="questionorder",
            name="quiz",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="content.quiz"
            ),
        ),
        migrations.CreateModel(
            name="QuestionMedia",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file", models.FileField(upload_to="question_media/")),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("upload", "Upload"),
                            ("library", "Library"),
                            ("embed", "Embed"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=255)),
                ("embed_code", models.TextField(blank=True, null=True)),
                ("input_type", models.TextField(blank=True, null=True)),
                ("url_from_library", models.URLField(blank=True, max_length=500)),
                ("type_from_library", models.CharField(blank=True, max_length=255)),
                (
                    "question",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="media_items",
                        to="content.question",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Module",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("order", models.PositiveIntegerField()),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modules",
                        to="content.course",
                    ),
                ),
            ],
            options={"ordering": ["order"],},
        ),
        migrations.CreateModel(
            name="Media",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("thumbnail", "Thumbnail")], max_length=20
                    ),
                ),
                ("thumbnail_link", models.URLField(blank=True, max_length=500)),
                (
                    "thumbnail_image",
                    models.ImageField(blank=True, upload_to="thumbnails/"),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="media",
                        to="content.course",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="lesson",
            name="module",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="lessons",
                to="content.module",
            ),
        ),
        migrations.AddField(
            model_name="lesson",
            name="uploaded_file",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="content.uploadedfile",
            ),
        ),
        migrations.CreateModel(
            name="EventDate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("start_date", "Start Date"),
                            ("expiration_date", "Expiration Date"),
                            ("due_date", "Due Date"),
                            (
                                "certificate_expiration_date",
                                "Certificate Expiration Date",
                            ),
                        ],
                        max_length=50,
                    ),
                ),
                ("date", models.DateField(blank=True, null=True)),
                ("time", models.TimeField(blank=True, null=True)),
                ("from_enrollment", models.JSONField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EssayAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question_id",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Question ID"
                    ),
                ),
                (
                    "answer_text",
                    models.TextField(
                        help_text="Student's essay response.",
                        verbose_name="Answer Text",
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Submitted At"
                    ),
                ),
                (
                    "sitting_id",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Sitting ID"
                    ),
                ),
                (
                    "ai_feedback",
                    models.TextField(
                        blank=True,
                        help_text="AI-generated feedback or scoring.",
                        null=True,
                        verbose_name="AI Feedback",
                    ),
                ),
                (
                    "prompt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="content.essayprompt",
                        verbose_name="Prompt",
                    ),
                ),
            ],
            options={
                "verbose_name": "Essay Answer",
                "verbose_name_plural": "Essay Answers",
            },
        ),
        migrations.CreateModel(
            name="Credential",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("certificate", "Certificate")], max_length=20
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=200)),
                ("source_title", models.CharField(blank=True, max_length=200)),
                ("source", models.URLField(blank=True, max_length=500)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="credentials",
                        to="content.course",
                    ),
                ),
            ],
            bases=(models.Model, content.models.EventDateMixin),
        ),
        migrations.AddField(
            model_name="course",
            name="credential",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="course_credential",
                to="content.credential",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="thumbnail",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="course_thumbnail",
                to="content.media",
            ),
        ),
        migrations.CreateModel(
            name="Classroom",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "schedule",
                    models.TextField(
                        blank=True, help_text="Optional notes like 'M/W/F at 10am'"
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="classrooms",
                        to="content.course",
                    ),
                ),
                (
                    "students",
                    models.ManyToManyField(
                        related_name="student_classrooms", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "teachers",
                    models.ManyToManyField(
                        related_name="teaching_classrooms", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Answer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField()),
                ("is_correct", models.BooleanField(default=False)),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="content.question",
                    ),
                ),
            ],
            options={"ordering": ["order"],},
        ),
        migrations.AlterUniqueTogether(
            name="questionorder", unique_together={("quiz", "question")},
        ),
        migrations.CreateModel(
            name="FITBAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content",
                    models.CharField(max_length=255, verbose_name="Acceptable Answer"),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="acceptable_answers",
                        to="content.fitbquestion",
                    ),
                ),
            ],
            options={"ordering": ["order"],},
        ),
        migrations.AddField(
            model_name="essayprompt",
            name="question",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="prompts",
                to="content.essayquestion",
                verbose_name="Related Essay Question",
            ),
        ),
    ]
