# Generated by Django 4.2.13 on 2025-05-28 19:47

import content.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=200)),
                ("description", models.TextField(blank=True, max_length=2000)),
                (
                    "parent_category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="subcategories",
                        to="content.category",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scorm_id", models.CharField(blank=True, max_length=255, null=True)),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, max_length=5000)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("bundle", "Course Bundle"),
                            ("in_person", "In Person Course"),
                            ("online", "Online Course"),
                        ],
                        default="bundle",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("Active", "Active"), ("Inactive", "Inactive")],
                        default="Inactive",
                        max_length=20,
                    ),
                ),
                ("upload_instructions", models.TextField(blank=True, max_length=5000)),
                ("locked", models.BooleanField(default=False)),
                (
                    "estimated_completion_time",
                    models.DurationField(
                        blank=True,
                        help_text="Estimated time to complete the course (e.g., 3 hours)",
                        null=True,
                    ),
                ),
                ("terms_and_conditions", models.BooleanField(default=False)),
                (
                    "must_complete",
                    models.CharField(
                        choices=[
                            ("any_order", "All lessons, in any order"),
                            ("by_chapter", "All lessons, in order by chapter"),
                        ],
                        default="any_order",
                        max_length=20,
                    ),
                ),
                ("referencesEnabled", models.BooleanField(default=False)),
                ("uploadsEnabled", models.BooleanField(default=False)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="content.category",
                    ),
                ),
            ],
            bases=(models.Model, content.models.EventDateMixin),
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file", models.FileField(upload_to="user_files/")),
                ("title", models.CharField(default="Untitled", max_length=255)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                (
                    "file_type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("document", "Document"),
                            ("video", "Video"),
                            ("audio", "Audio"),
                            ("scorm", "SCORM"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=50,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tags", models.CharField(blank=True, max_length=128)),
                (
                    "figure",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="uploads/%Y/%m/%d",
                        verbose_name="Figure",
                    ),
                ),
                (
                    "urlField",
                    models.TextField(
                        blank=True, null=True, verbose_name="IFrame for Exercises."
                    ),
                ),
                (
                    "content",
                    models.CharField(
                        help_text="Enter the question text that you want displayed",
                        max_length=1000,
                        verbose_name="Question",
                    ),
                ),
                (
                    "explanation",
                    models.TextField(
                        blank=True,
                        help_text="Explanation to be shown after the question has been answered.",
                        max_length=2000,
                        verbose_name="Explanation",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.category",
                        verbose_name="Category",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UploadedFile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("file", models.FileField(blank=True, null=True, upload_to="uploads/")),
                ("url", models.URLField(blank=True, null=True)),
                (
                    "scorm_entry_point",
                    models.CharField(blank=True, max_length=512, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Upload",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "approval_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            (None, "None"),
                            ("instructor", "Instructor"),
                            ("admin", "Admin"),
                            ("other", "Other"),
                        ],
                        default=None,
                        max_length=30,
                        null=True,
                    ),
                ),
                ("title", models.CharField(default="title", max_length=255)),
                ("description", models.TextField(blank=True, max_length=2000)),
                (
                    "approvers",
                    models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="uploads",
                        to="content.course",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Resources",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("reference", "Reference")], max_length=20
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=200)),
                ("url", models.URLField(blank=True, max_length=500)),
                ("file_type", models.CharField(blank=True, max_length=200, null=True)),
                ("file_title", models.CharField(blank=True, max_length=200, null=True)),
                ("description", models.TextField(blank=True, max_length=2000)),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resources",
                        to="content.course",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Quiz",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("title", models.CharField(max_length=200, verbose_name="Title")),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="a description of the quiz",
                        verbose_name="Description",
                    ),
                ),
                (
                    "duration",
                    models.SmallIntegerField(
                        blank=True,
                        default=30,
                        help_text="Minutes to take the exam.",
                        verbose_name="Duration",
                    ),
                ),
                (
                    "url",
                    models.SlugField(
                        help_text="a user friendly url",
                        max_length=60,
                        unique=True,
                        verbose_name="user friendly url",
                    ),
                ),
                (
                    "random_order",
                    models.BooleanField(
                        default=True,
                        help_text="Display the questions in a random order or as they are set?",
                        verbose_name="Random Order",
                    ),
                ),
                (
                    "ai_grade_essay",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="Use AI to grade essays?",
                        null=True,
                        verbose_name="AI Essay Grading",
                    ),
                ),
                (
                    "max_questions",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of questions to be answered on each attempt.",
                        null=True,
                        verbose_name="Max Questions",
                    ),
                ),
                (
                    "answers_at_end",
                    models.BooleanField(
                        default=False,
                        help_text="Correct answer is NOT shown after question. Answers displayed at the end.",
                        verbose_name="Answers at end",
                    ),
                ),
                (
                    "exam_paper",
                    models.BooleanField(
                        default=False,
                        help_text="If yes, the result of each attempt by a user will be stored. Necessary for marking.",
                        verbose_name="Exam Paper",
                    ),
                ),
                (
                    "exam_material",
                    models.TextField(
                        blank=True,
                        help_text="Specify any external resources the test-taker is allowed to use during the exam. Please separate each exam material by a comma.",
                        verbose_name="Exam Materials",
                    ),
                ),
                (
                    "ai_grade_rubric",
                    models.TextField(
                        blank=True,
                        help_text="Rubric to be used by the grading AI",
                        null=True,
                        verbose_name="AI Grading Rubric",
                    ),
                ),
                (
                    "single_attempt",
                    models.BooleanField(
                        default=False,
                        help_text="If yes, only one attempt by a user will be permitted. Non users cannot sit this exam.",
                        verbose_name="Single Attempt",
                    ),
                ),
                (
                    "pass_mark",
                    models.SmallIntegerField(
                        blank=True,
                        default=70,
                        help_text="Percentage required to pass exam.",
                        verbose_name="Pass Mark(%)",
                    ),
                ),
                (
                    "success_text",
                    models.TextField(
                        blank=True,
                        default="Your exam will be reviewed by an auditor from all the footage that was collected from your pre-exam environment and activities recorded during the exam. We will notify you as soon as your exam has been reviewed. This may take up to 2 business days.",
                        help_text="Displayed if user passes.",
                        verbose_name="Success Text",
                    ),
                ),
                (
                    "singularExamRules",
                    models.TextField(
                        blank=True,
                        help_text="a set of rules for a specific exam.",
                        verbose_name="singularExamRules",
                    ),
                ),
                (
                    "fail_text",
                    models.TextField(
                        blank=True,
                        default="You haven't passed this attempt for this exam. If this was your 1st attempt, you are free to move on to the next attempt. If this was your 2nd attempt, you will be enrolled in your 3rd attempt in 24 hours.If this was your 3rd and final attempt, please contact registration@northeastmaritime.com to pay your retake fee.",
                        help_text="Displayed if user fails.",
                        verbose_name="Fail Text",
                    ),
                ),
                (
                    "draft",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="If yes, the quiz is not displayed in the quiz list and can only be taken by users who can edit quizzes.",
                        verbose_name="Draft",
                    ),
                ),
                (
                    "totalAttempts",
                    models.SmallIntegerField(
                        default=1,
                        help_text="Maximum number of attempts the user can attempt.",
                        verbose_name="Total Number of Attempts",
                    ),
                ),
                (
                    "attemptsTaken",
                    models.SmallIntegerField(
                        default=1,
                        help_text="Number of attempts the current user has taken.",
                        verbose_name="Number of attempts taken",
                    ),
                ),
                (
                    "totalWarnings",
                    models.IntegerField(
                        default=25,
                        help_text="Total number of warnings allowed for this quiz. Unlimited if 0.",
                        verbose_name="Number of warnings before exam shut down:",
                    ),
                ),
                (
                    "allowRestart",
                    models.BooleanField(
                        default=True,
                        verbose_name="Do you want the user to restart the exam once started?",
                    ),
                ),
                ("archived", models.BooleanField(blank=True, default=False)),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="quiz_author",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Exam author",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.category",
                        verbose_name="Category",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Module",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("order", models.PositiveIntegerField()),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modules",
                        to="content.course",
                    ),
                ),
            ],
            options={"ordering": ["order"],},
        ),
        migrations.CreateModel(
            name="Media",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("thumbnail", "Thumbnail")], max_length=20
                    ),
                ),
                ("thumbnail_link", models.URLField(blank=True, max_length=500)),
                (
                    "thumbnail_image",
                    models.ImageField(blank=True, upload_to="thumbnails/"),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="media",
                        to="content.course",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True, max_length=2000)),
                ("order", models.PositiveIntegerField()),
                ("content_type", models.CharField(default="file", max_length=200)),
                ("scorm_id", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.file",
                    ),
                ),
                (
                    "module",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lessons",
                        to="content.module",
                    ),
                ),
                (
                    "uploaded_file",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.uploadedfile",
                    ),
                ),
            ],
            options={"ordering": ["order"],},
        ),
        migrations.CreateModel(
            name="EventDate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("start_date", "Start Date"),
                            ("expiration_date", "Expiration Date"),
                            ("due_date", "Due Date"),
                            (
                                "certificate_expiration_date",
                                "Certificate Expiration Date",
                            ),
                        ],
                        max_length=50,
                    ),
                ),
                ("date", models.DateField(blank=True, null=True)),
                ("time", models.TimeField(blank=True, null=True)),
                ("from_enrollment", models.JSONField(blank=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Credential",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("certificate", "Certificate")], max_length=20
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=200)),
                ("source_title", models.CharField(blank=True, max_length=200)),
                ("source", models.URLField(blank=True, max_length=500)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="credentials",
                        to="content.course",
                    ),
                ),
            ],
            bases=(models.Model, content.models.EventDateMixin),
        ),
        migrations.AddField(
            model_name="course",
            name="credential",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="course_credential",
                to="content.credential",
            ),
        ),
        migrations.AddField(
            model_name="course",
            name="thumbnail",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="course_thumbnail",
                to="content.media",
            ),
        ),
        migrations.CreateModel(
            name="Classroom",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "schedule",
                    models.TextField(
                        blank=True, help_text="Optional notes like 'M/W/F at 10am'"
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="classrooms",
                        to="content.course",
                    ),
                ),
                (
                    "students",
                    models.ManyToManyField(
                        related_name="student_classrooms", to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "teachers",
                    models.ManyToManyField(
                        related_name="teaching_classrooms", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Answer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField()),
                ("is_correct", models.BooleanField(default=False)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="content.question",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QuestionOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="content.question",
                    ),
                ),
                (
                    "quiz",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="content.quiz"
                    ),
                ),
            ],
            options={"ordering": ["order"], "unique_together": {("quiz", "question")},},
        ),
    ]
