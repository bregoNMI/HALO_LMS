# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2019-05-06 16:40


from decimal import Decimal

import django.db.models.deletion
import django_extensions.db.fields
import oscar.models.fields
import simple_history.models
from django.conf import settings
from django.db import migrations, models

import ecommerce.extensions.offer.models


class Migration(migrations.Migration):

    dependencies = [
        ('catalogue', '0039_historicalproduct_historicalproductattributevalue'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('voucher', '0006_auto_20181205_1017'),
        ('sites', '0002_alter_domain_unique'),
        ('partner', '0014_historicalstockrecord'),
        ('offer', '0023_offerassignmentemailattempt'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalBenefit',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[(b'Percentage', "Discount is a percentage off of the product's value"), (b'Absolute', "Discount is a fixed amount off of the product's value"), (b'Multibuy', 'Discount is to give the cheapest product for free'), (b'Fixed price', 'Get the products that meet the condition for a fixed price'), (b'Shipping absolute', 'Discount is a fixed amount of the shipping cost'), (b'Shipping fixed price', 'Get shipping for a fixed price'), (b'Shipping percentage', 'Discount is a percentage off of the shipping cost')], max_length=128, verbose_name='Type')),
                ('value', oscar.models.fields.PositiveDecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Value')),
                ('max_affected_items', models.PositiveIntegerField(blank=True, help_text='Set this to prevent the discount consuming all items within the range that are in the basket.', null=True, verbose_name='Max Affected Items')),
                ('proxy_class', oscar.models.fields.NullCharField(default=None, max_length=255, verbose_name='Custom class')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('range', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='offer.Range', verbose_name='Range')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Benefit',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCondition',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[(b'Count', 'Depends on number of items in basket that are in condition range'), (b'Value', 'Depends on value of items in basket that are in condition range'), (b'Coverage', 'Needs to contain a set number of DISTINCT items from the condition range')], max_length=128, verbose_name='Type')),
                ('value', oscar.models.fields.PositiveDecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Value')),
                ('proxy_class', oscar.models.fields.NullCharField(default=None, max_length=255, verbose_name='Custom class')),
                ('enterprise_customer_uuid', models.UUIDField(blank=True, null=True, verbose_name='EnterpriseCustomer UUID')),
                ('enterprise_customer_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='EnterpriseCustomer Name')),
                ('enterprise_customer_catalog_uuid', models.UUIDField(blank=True, null=True, verbose_name='EnterpriseCustomerCatalog UUID')),
                ('program_uuid', models.UUIDField(blank=True, null=True, verbose_name='Program UUID')),
                ('journal_bundle_uuid', models.UUIDField(blank=True, null=True, verbose_name='JournalBundle UUID')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('range', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='offer.Range', verbose_name='Range')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Condition',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalConditionalOffer',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text="This is displayed within the customer's basket", max_length=128, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='This is displayed on the offer browsing page', verbose_name='Description')),
                ('offer_type', models.CharField(choices=[(b'Site', 'Site offer - available to all users'), (b'Voucher', 'Voucher offer - only available after entering the appropriate voucher code'), (b'User', 'User offer - available to certain types of user'), (b'Session', 'Session offer - temporary offer, available for a user for the duration of their session')], default=b'Site', max_length=128, verbose_name='Type')),
                ('status', models.CharField(default=b'Open', max_length=64, verbose_name='Status')),
                ('priority', models.IntegerField(default=0, help_text='The highest priority offers are applied first', verbose_name='Priority')),
                ('start_datetime', models.DateTimeField(blank=True, help_text='Offers are active from the start date. Leave this empty if the offer has no start date.', null=True, verbose_name='Start date')),
                ('end_datetime', models.DateTimeField(blank=True, help_text='Offers are active until the end date. Leave this empty if the offer has no expiry date.', null=True, verbose_name='End date')),
                ('max_global_applications', models.PositiveIntegerField(blank=True, help_text='The number of times this offer can be used before it is unavailable', null=True, verbose_name='Max global applications')),
                ('max_user_applications', models.PositiveIntegerField(blank=True, help_text='The number of times a single user can use this offer', null=True, verbose_name='Max user applications')),
                ('max_basket_applications', models.PositiveIntegerField(blank=True, help_text='The number of times this offer can be applied to a basket (and order)', null=True, verbose_name='Max basket applications')),
                ('max_discount', models.DecimalField(blank=True, decimal_places=2, help_text='When an offer has given more discount to orders than this threshold, then the offer becomes unavailable', max_digits=12, null=True, verbose_name='Max discount')),
                ('total_discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Discount')),
                ('num_applications', models.PositiveIntegerField(default=0, verbose_name='Number of applications')),
                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),
                ('redirect_url', oscar.models.fields.ExtendedURLField(blank=True, verbose_name='URL redirect (optional)')),
                ('date_created', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('email_domains', models.CharField(blank=True, max_length=255, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('benefit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='offer.Benefit', verbose_name='Benefit')),
                ('condition', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='offer.Condition', verbose_name='Condition')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('partner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='partner.Partner')),
                ('site', models.ForeignKey(blank=True, db_constraint=False, default=None, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.Site', verbose_name='Site')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Conditional offer',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOfferAssignment',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('code', models.CharField(max_length=128)),
                ('user_email', models.EmailField(max_length=254)),
                ('status', models.CharField(choices=[(b'EMAIL_PENDING', 'Email to user pending.'), (b'ASSIGNED', 'Code successfully assigned to user.'), (b'REDEEMED', 'Code has been redeemed by user.'), (b'EMAIL_BOUNCED', 'Email to user bounced.'), (b'REVOKED', 'Code has been revoked for this user.')], default=b'EMAIL_PENDING', max_length=255)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('offer', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='offer.ConditionalOffer')),
                ('voucher_application', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='voucher.VoucherApplication')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical offer assignment',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRange',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=128, verbose_name='Name')),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False, help_text='Public ranges have a customer-facing page', verbose_name='Is public?')),
                ('includes_all_products', models.BooleanField(default=False, verbose_name='Includes all products?')),
                ('proxy_class', oscar.models.fields.NullCharField(db_index=True, default=None, max_length=255, verbose_name='Custom class')),
                ('date_created', models.DateTimeField(blank=True, editable=False, verbose_name='Date Created')),
                ('catalog_query', models.TextField(blank=True, null=True)),
                ('course_catalog', models.PositiveIntegerField(blank=True, help_text='Course Catalog ID from the Discovery Service.', null=True)),
                ('enterprise_customer', models.UUIDField(blank=True, help_text='UUID for an EnterpriseCustomer from the Enterprise Service.', null=True)),
                ('enterprise_customer_catalog', models.UUIDField(blank=True, help_text='UUID for an EnterpriseCustomerCatalog from the Enterprise Service.', null=True)),
                ('course_seat_types', models.CharField(blank=True, max_length=255, null=True, validators=[ecommerce.extensions.offer.models.validate_credit_seat_type])),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('catalog', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='catalogue.Catalog')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Range',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRangeProduct',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('display_order', models.IntegerField(default=0)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='catalogue.Product')),
                ('range', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='offer.Range')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical range product',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
