# Generated by Django 4.2.13 on 2024-09-25 14:36
from django.db import migrations, models

# Define your timezones_dict with the desired time zones and UTC offsets
timezones_dict = {
    'Eastern Time (US & Canada)': '(UTC-05:00)',
    'Central Time (US & Canada)': '(UTC-06:00)',
    'Mountain Time (US & Canada)': '(UTC-07:00)',
    'Pacific Time (US & Canada)': '(UTC-08:00)',
    'Atlantic Time (Canada)': '(UTC-04:00)',
    'Eastern Standard Time (EST)': '(UTC-05:00)',
    'Central Standard Time (CST)': '(UTC-06:00)',
    'Mountain Standard Time (MST)': '(UTC-07:00)',
    'Pacific Standard Time (PST)': '(UTC-08:00)',
    
    'Greenwich Mean Time': '(UTC+00:00)',
    'British Summer Time': '(UTC+01:00)',
    'Central European Time': '(UTC+01:00)',
    'Central European Summer Time': '(UTC+02:00)',
    'Eastern European Time': '(UTC+02:00)',
    'Eastern European Summer Time': '(UTC+03:00)',
    
    'India Standard Time': '(UTC+05:30)',
    'Japan Standard Time': '(UTC+09:00)',
    'China Standard Time': '(UTC+08:00)',
    
    'Australian Eastern Standard Time': '(UTC+10:00)',
    'Australian Central Standard Time': '(UTC+09:30)',
    'Australian Western Standard Time': '(UTC+08:00)',
    
    'New Zealand Standard Time': '(UTC+12:00)',
    'UTC+03:00': '(UTC+03:00) Moscow, St. Petersburg',
    'UTC+04:00': '(UTC+04:00) Gulf Standard Time',
    
    'Arabian Standard Time': '(UTC+03:00)',
    'Eastern Africa Time': '(UTC+03:00)',
    
    'Pacific Daylight Time (PDT)': '(UTC-07:00)',
    'Mountain Daylight Time (MDT)': '(UTC-06:00)',
    'Central Daylight Time (CDT)': '(UTC-05:00)',
    'Eastern Daylight Time (EDT)': '(UTC-04:00)',
}

def populate_timezones(apps, schema_editor):
    TimeZone = apps.get_model('client_admin', 'TimeZone')
    for tz, utc_offset in timezones_dict.items():
        tz_with_offset = f"{tz} {utc_offset}"  # Append UTC offset to the timezone name
        if not TimeZone.objects.filter(name=tz_with_offset).exists():  # Avoid duplicates
            TimeZone.objects.create(name=tz_with_offset)
            print(f"Created TimeZone: {tz_with_offset}")  # Print statement to confirm creation
        else:
            print(f"TimeZone already exists: {tz_with_offset}")

class Migration(migrations.Migration):

    dependencies = [
        ("client_admin", "0006_organizationsettings_date_format"),
    ]

    operations = [
        migrations.CreateModel(
            name="TimeZone",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.RunPython(populate_timezones),
    ]  